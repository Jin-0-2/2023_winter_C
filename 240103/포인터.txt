포인터
값 저장 vs 주소 저장

//int 저장
int num;

//int의 주소 저장
int* pnum;

---------------
int num        = 10;
int *p1        = &num;
const int *p2  = &num;  //* 많이 씀 
int * const p3 = &num;

112 p3  [100]  p3++;  // 에러
108 p2  [100]  *p2,  *p2 = 20; // 에러
104 p1  [100]
100 num  10
---------------
const int NUM = 10;
int *p = &NUM;

104  p    [100]   *p = 20; // 문법상 괜찮음. 하지만 *p의 역참조인 NUM의 값 10은 상수. 논리적으로 변경 불가.
100  NUM   10
---------------
int num = 10;
int *p1 = &num;
int *p2;   // 쓰레기 저장
> int *p2 = NULL // #define NULL 0

//역참조 : 올바른 주소가 있을 때만 가능!
//역참조 하기 전에 올바른 주소가 있다는 것을 알고 싶을때?
*p1 = 20;

if(p2 != NULL)
    *p2 = 20;

















